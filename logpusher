#!/usr/bin/env ruby

require 'optparse'

require "./src/util/util.rb"
require "./src/util/rolling_aggregate.rb"
require "./src/upload_stats.rb"
require "./src/logfile_pusher.rb"
require "./src/eventql_uploader.rb"
require "./src/sqlite_uploader.rb"

# parse arguments
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: logpusher.rb [options]"

  opts.on("-f", "--file filename", "Set the logfile to import") do |f|
    options[:file] = f
  end

  opts.on("-r", "--regex regex", "The Regex of the logline") do |r|
    options[:regex] = r
  end

  opts.on("-s", "--storage engine", "The storage engine to be used") do |s|
    options[:storage] = s
  end

  opts.on("-d", "--database db", "The database engine to be used") do |d|
    options[:db] = d
  end

  opts.on("-t", "--table table", "Set the table name") do |t|
    options[:table] = t
  end

  opts.on("-h", "--host hostname", "Set the hostname") do |h|
    options[:host] = h
  end

  opts.on("-p", "--port port", "Set the port") do |p|
    options[:port] = p
  end

  opts.on("-q", "--quiet", "Run quietly") do |q|
    options[:quiet] = q
  end

  opts.on("-?", "--help", "help") do
    $stderr.puts opts
    exit
  end
end.parse!

mandatory_args = [:file, :regex, :storage]
missing = mandatory_args.select{ |param| options[param].nil? }
unless missing.empty?
  puts "ERROR: missing arguments: #{missing.join(', ')}. Run logpusher.rb --help for help"
  exit
end

logfile_pusher = nil

storage_engines = {
  "eventql" => EventQLUploader,
  "sqlite" => SQLiteUploader
}

begin
  unless storage_engines.has_key?(options[:storage])
    puts "ERROR: unknown uploader #{options[:uploader]}"
    exit 1
  end

  mandatory_args = storage_engines[options[:storage]].mandatory_args()
  missing = mandatory_args.select{ |param| options[param].nil? }
  unless missing.empty?
    raise "missing arguments: #{missing.join(', ')}. Run logpusher.rb --help for help"
  end

  storage_engine = storage_engines[options[:storage]].new(options)

  logfile_pusher = LogfilePusher.new(
      options[:file],
      options[:regex],
      storage_engine,
      options[:quiet].nil? ? false : true)
  logfile_pusher.run

rescue SystemExit, Interrupt
  exit(0)

rescue
  $stderr.puts "ERROR: #{$!} \n"
  exit(1)

ensure
  logfile_pusher.stop unless logfile_pusher.nil?
end

